import * as core from '@actions/core';
import * as github from '@actions/github';

export async function run(): Promise<void> {
  try {
    const greeting: string = core.getInput('greeting') || 'Hello';

    if (!greeting.trim()) {
      throw new Error('Greeting cannot be empty');
    }

    core.info(`Processing greeting: ${greeting}`);
    const message: string = `${greeting} from GitHub Actions!`;

    core.info(`Generated message: ${message}`);
    core.setOutput('message', message);

    // Add job summary (visible in Actions tab)
    await core.summary
      .addHeading('Code Review Results')
      .addRaw(`**Message:** ${message}`)
      .addSeparator()
      .addTable([
        ['File', 'Status', 'Issues'],
        ['src/index.ts', '‚úÖ Clean', '0'],
        ['Example file', '‚ö†Ô∏è Warning', '1'],
      ])
      .write();

    // Add PR comment if this is a pull request
    const token = core.getInput('github-token');
    if (token && github.context.eventName === 'pull_request') {
      const octokit = github.getOctokit(token);

      const commentBody = `## ü§ñ AI Code Review Results

${message}

| File | Status | Issues |
|------|---------|---------|
| src/index.ts | ‚úÖ Clean | 0 |
| Example file | ‚ö†Ô∏è Warning | 1 |

---
*Generated by AI Code Review Action*`;

      await octokit.rest.issues.createComment({
        ...github.context.repo,
        issue_number: github.context.issue.number,
        body: commentBody,
      });

      core.info('PR comment added successfully');
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    core.error(`Action failed: ${errorMessage}`);
    core.setFailed(errorMessage);
  }
}

if (require.main === module) {
  run();
}
